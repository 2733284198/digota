// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order/orderpb/order.proto

/*
	Package orderpb is a generated protocol buffer package.

	It is generated from these files:
		order/orderpb/order.proto

	It has these top-level messages:
		Order
		OrderItem
		Shipping
		OrderList
		NewRequest
		GetRequest
		PayRequest
		ReturnRequest
		ListRequest
*/
package orderpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import paymentpb "github.com/digota/digota/payment/paymentpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrderStatus int32

const (
	Order_Created   OrderStatus = 0
	Order_Paid      OrderStatus = 1
	Order_Canceled  OrderStatus = 2
	Order_Fulfilled OrderStatus = 3
	Order_Returned  OrderStatus = 4
)

var OrderStatus_name = map[int32]string{
	0: "Created",
	1: "Paid",
	2: "Canceled",
	3: "Fulfilled",
	4: "Returned",
}
var OrderStatus_value = map[string]int32{
	"Created":   0,
	"Paid":      1,
	"Canceled":  2,
	"Fulfilled": 3,
	"Returned":  4,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorOrder, []int{0, 0} }

type OrderItem_Type int32

const (
	OrderItem_reserved OrderItem_Type = 0
	OrderItem_sku      OrderItem_Type = 1
	OrderItem_discount OrderItem_Type = 2
	OrderItem_tax      OrderItem_Type = 3
	OrderItem_shipping OrderItem_Type = 4
)

var OrderItem_Type_name = map[int32]string{
	0: "reserved",
	1: "sku",
	2: "discount",
	3: "tax",
	4: "shipping",
}
var OrderItem_Type_value = map[string]int32{
	"reserved": 0,
	"sku":      1,
	"discount": 2,
	"tax":      3,
	"shipping": 4,
}

func (x OrderItem_Type) String() string {
	return proto.EnumName(OrderItem_Type_name, int32(x))
}
func (OrderItem_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorOrder, []int{1, 0} }

type ListRequest_Sort int32

const (
	ListRequest_Natural     ListRequest_Sort = 0
	ListRequest_CreatedDesc ListRequest_Sort = 1
	ListRequest_CreatedAsc  ListRequest_Sort = 2
	ListRequest_UpdatedDesc ListRequest_Sort = 3
	ListRequest_UpdatedAsc  ListRequest_Sort = 4
)

var ListRequest_Sort_name = map[int32]string{
	0: "Natural",
	1: "CreatedDesc",
	2: "CreatedAsc",
	3: "UpdatedDesc",
	4: "UpdatedAsc",
}
var ListRequest_Sort_value = map[string]int32{
	"Natural":     0,
	"CreatedDesc": 1,
	"CreatedAsc":  2,
	"UpdatedDesc": 3,
	"UpdatedAsc":  4,
}

func (x ListRequest_Sort) String() string {
	return proto.EnumName(ListRequest_Sort_name, int32(x))
}
func (ListRequest_Sort) EnumDescriptor() ([]byte, []int) { return fileDescriptorOrder, []int{8, 0} }

type Order struct {
	Id       string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Amount   int64              `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency paymentpb.Currency `protobuf:"varint,3,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty"`
	Items    []*OrderItem       `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Metadata map[string]string  `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Email    string             `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	ChargeId string             `protobuf:"bytes,7,opt,name=chargeId,proto3" json:"chargeId,omitempty"`
	Status   OrderStatus        `protobuf:"varint,8,opt,name=Status,proto3,enum=orderpb.OrderStatus" json:"Status,omitempty"`
	Shipping *Shipping          `protobuf:"bytes,9,opt,name=shipping" json:"shipping,omitempty"`
	Created  int64              `protobuf:"varint,998,opt,name=created,proto3" json:"created,omitempty"`
	Updated  int64              `protobuf:"varint,999,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{0} }

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Order) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *Order) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Order) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Order) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Order) GetChargeId() string {
	if m != nil {
		return m.ChargeId
	}
	return ""
}

func (m *Order) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return Order_Created
}

func (m *Order) GetShipping() *Shipping {
	if m != nil {
		return m.Shipping
	}
	return nil
}

func (m *Order) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Order) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type OrderItem struct {
	Type        OrderItem_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=orderpb.OrderItem_Type" json:"type,omitempty" validate:"required,gte=1,lte=4"`
	Quantity    int64              `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty" validate:"omitempty,gte=0"`
	Amount      int64              `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency    paymentpb.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty" validate:"omitempty,gte=1,lte=128"`
	Parent      string             `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty" validate:"omitempty,uuid4"`
	Description string             `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *OrderItem) Reset()                    { *m = OrderItem{} }
func (m *OrderItem) String() string            { return proto.CompactTextString(m) }
func (*OrderItem) ProtoMessage()               {}
func (*OrderItem) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{1} }

func (m *OrderItem) GetType() OrderItem_Type {
	if m != nil {
		return m.Type
	}
	return OrderItem_reserved
}

func (m *OrderItem) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *OrderItem) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OrderItem) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *OrderItem) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *OrderItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Shipping struct {
	Name           string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phone          string            `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Address        *Shipping_Address `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Carrier        string            `protobuf:"bytes,4,opt,name=carrier,proto3" json:"carrier,omitempty"`
	TrackingNumber string            `protobuf:"bytes,5,opt,name=trackingNumber,proto3" json:"trackingNumber,omitempty"`
}

func (m *Shipping) Reset()                    { *m = Shipping{} }
func (m *Shipping) String() string            { return proto.CompactTextString(m) }
func (*Shipping) ProtoMessage()               {}
func (*Shipping) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{2} }

func (m *Shipping) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shipping) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Shipping) GetAddress() *Shipping_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Shipping) GetCarrier() string {
	if m != nil {
		return m.Carrier
	}
	return ""
}

func (m *Shipping) GetTrackingNumber() string {
	if m != nil {
		return m.TrackingNumber
	}
	return ""
}

type Shipping_Address struct {
	Line1      string `protobuf:"bytes,1,opt,name=line1,proto3" json:"line1,omitempty"`
	City       string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Country    string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Line2      string `protobuf:"bytes,4,opt,name=line2,proto3" json:"line2,omitempty"`
	PostalCode string `protobuf:"bytes,5,opt,name=postalCode,proto3" json:"postalCode,omitempty"`
	State      string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *Shipping_Address) Reset()                    { *m = Shipping_Address{} }
func (m *Shipping_Address) String() string            { return proto.CompactTextString(m) }
func (*Shipping_Address) ProtoMessage()               {}
func (*Shipping_Address) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{2, 0} }

func (m *Shipping_Address) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *Shipping_Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Shipping_Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Shipping_Address) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *Shipping_Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Shipping_Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type OrderList struct {
	Orders []*Order `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
	Total  int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *OrderList) Reset()                    { *m = OrderList{} }
func (m *OrderList) String() string            { return proto.CompactTextString(m) }
func (*OrderList) ProtoMessage()               {}
func (*OrderList) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{3} }

func (m *OrderList) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *OrderList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type NewRequest struct {
	Currency paymentpb.Currency `protobuf:"varint,1,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty" validate:"required,gte=1,lte=128"`
	Items    []*OrderItem       `protobuf:"bytes,2,rep,name=items" json:"items,omitempty" bson:"items" validate:"dive,required"`
	Metadata map[string]string  `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Email    string             `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty" validate:"omitempty,email"`
	Shipping *Shipping          `protobuf:"bytes,5,opt,name=shipping" json:"shipping,omitempty" validate:"omitempty,dive"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{4} }

func (m *NewRequest) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *NewRequest) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *NewRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NewRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NewRequest) GetShipping() *Shipping {
	if m != nil {
		return m.Shipping
	}
	return nil
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"uuid4,required"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{5} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PayRequest struct {
	Id                string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"uuid4,required"`
	Card              *paymentpb.Card             `protobuf:"bytes,2,opt,name=card" json:"card,omitempty" validate:"dive,required"`
	PaymentProviderId paymentpb.PaymentProviderId `protobuf:"varint,3,opt,name=paymentProviderId,proto3,enum=paymentpb.PaymentProviderId" json:"paymentProviderId,omitempty" validate:"required,gte=1,lte=1"`
}

func (m *PayRequest) Reset()                    { *m = PayRequest{} }
func (m *PayRequest) String() string            { return proto.CompactTextString(m) }
func (*PayRequest) ProtoMessage()               {}
func (*PayRequest) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{6} }

func (m *PayRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PayRequest) GetCard() *paymentpb.Card {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *PayRequest) GetPaymentProviderId() paymentpb.PaymentProviderId {
	if m != nil {
		return m.PaymentProviderId
	}
	return paymentpb.PaymentProviderId_PROVIDER_Reserved
}

type ReturnRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"uuid4,required"`
}

func (m *ReturnRequest) Reset()                    { *m = ReturnRequest{} }
func (m *ReturnRequest) String() string            { return proto.CompactTextString(m) }
func (*ReturnRequest) ProtoMessage()               {}
func (*ReturnRequest) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{7} }

func (m *ReturnRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListRequest struct {
	Page  int64            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" validate:"omitempty,required,gte=0"`
	Limit int64            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" validate:"omitempty,required,gt=0"`
	Sort  ListRequest_Sort `protobuf:"varint,3,opt,name=sort,proto3,enum=orderpb.ListRequest_Sort" json:"sort,omitempty" validate:"omitempty,required,gte=0,lte=4"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorOrder, []int{8} }

func (m *ListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetSort() ListRequest_Sort {
	if m != nil {
		return m.Sort
	}
	return ListRequest_Natural
}

func init() {
	proto.RegisterType((*Order)(nil), "orderpb.order")
	proto.RegisterType((*OrderItem)(nil), "orderpb.orderItem")
	proto.RegisterType((*Shipping)(nil), "orderpb.shipping")
	proto.RegisterType((*Shipping_Address)(nil), "orderpb.shipping.Address")
	proto.RegisterType((*OrderList)(nil), "orderpb.orderList")
	proto.RegisterType((*NewRequest)(nil), "orderpb.newRequest")
	proto.RegisterType((*GetRequest)(nil), "orderpb.getRequest")
	proto.RegisterType((*PayRequest)(nil), "orderpb.payRequest")
	proto.RegisterType((*ReturnRequest)(nil), "orderpb.returnRequest")
	proto.RegisterType((*ListRequest)(nil), "orderpb.listRequest")
	proto.RegisterEnum("orderpb.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterEnum("orderpb.OrderItem_Type", OrderItem_Type_name, OrderItem_Type_value)
	proto.RegisterEnum("orderpb.ListRequest_Sort", ListRequest_Sort_name, ListRequest_Sort_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Order service

type OrderClient interface {
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Order, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Order, error)
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Order, error)
	Return(ctx context.Context, in *ReturnRequest, opts ...grpc.CallOption) (*Order, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*OrderList, error)
}

type orderClient struct {
	cc *grpc.ClientConn
}

func NewOrderClient(cc *grpc.ClientConn) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/orderpb.Order/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/orderpb.Order/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/orderpb.Order/Pay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Return(ctx context.Context, in *ReturnRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := grpc.Invoke(ctx, "/orderpb.Order/Return", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := grpc.Invoke(ctx, "/orderpb.Order/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Order service

type OrderServer interface {
	New(context.Context, *NewRequest) (*Order, error)
	Get(context.Context, *GetRequest) (*Order, error)
	Pay(context.Context, *PayRequest) (*Order, error)
	Return(context.Context, *ReturnRequest) (*Order, error)
	List(context.Context, *ListRequest) (*OrderList, error)
}

func RegisterOrderServer(s *grpc.Server, srv OrderServer) {
	s.RegisterService(&_Order_serviceDesc, srv)
}

func _Order_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Return_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Return(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/Return",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Return(ctx, req.(*ReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderpb.Order/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Order_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderpb.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _Order_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Order_Get_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _Order_Pay_Handler,
		},
		{
			MethodName: "Return",
			Handler:    _Order_Return_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Order_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/orderpb/order.proto",
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Amount))
	}
	if m.Currency != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Currency))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x22
			i++
			i = encodeVarintOrder(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x2a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovOrder(uint64(len(k))) + 1 + len(v) + sovOrder(uint64(len(v)))
			i = encodeVarintOrder(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrder(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrder(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.ChargeId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.ChargeId)))
		i += copy(dAtA[i:], m.ChargeId)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Status))
	}
	if m.Shipping != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Shipping.Size()))
		n1, err := m.Shipping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Created != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Updated))
	}
	return i, nil
}

func (m *OrderItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Type))
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Quantity))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Amount))
	}
	if m.Currency != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Currency))
	}
	if len(m.Parent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *Shipping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shipping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.Address != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Address.Size()))
		n2, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Carrier) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Carrier)))
		i += copy(dAtA[i:], m.Carrier)
	}
	if len(m.TrackingNumber) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.TrackingNumber)))
		i += copy(dAtA[i:], m.TrackingNumber)
	}
	return i, nil
}

func (m *Shipping_Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shipping_Address) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Line1) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Line1)))
		i += copy(dAtA[i:], m.Line1)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.Line2) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Line2)))
		i += copy(dAtA[i:], m.Line2)
	}
	if len(m.PostalCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.PostalCode)))
		i += copy(dAtA[i:], m.PostalCode)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	return i, nil
}

func (m *OrderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrder(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *NewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Currency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Currency))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrder(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x1a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovOrder(uint64(len(k))) + 1 + len(v) + sovOrder(uint64(len(v)))
			i = encodeVarintOrder(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrder(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrder(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Shipping != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Shipping.Size()))
		n3, err := m.Shipping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *PayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Card != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Card.Size()))
		n4, err := m.Card.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PaymentProviderId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.PaymentProviderId))
	}
	return i, nil
}

func (m *ReturnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Page))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Limit))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func encodeFixed64Order(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Order(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Order) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovOrder(uint64(m.Amount))
	}
	if m.Currency != 0 {
		n += 1 + sovOrder(uint64(m.Currency))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOrder(uint64(len(k))) + 1 + len(v) + sovOrder(uint64(len(v)))
			n += mapEntrySize + 1 + sovOrder(uint64(mapEntrySize))
		}
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.ChargeId)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOrder(uint64(m.Status))
	}
	if m.Shipping != nil {
		l = m.Shipping.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Created != 0 {
		n += 2 + sovOrder(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 2 + sovOrder(uint64(m.Updated))
	}
	return n
}

func (m *OrderItem) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOrder(uint64(m.Type))
	}
	if m.Quantity != 0 {
		n += 1 + sovOrder(uint64(m.Quantity))
	}
	if m.Amount != 0 {
		n += 1 + sovOrder(uint64(m.Amount))
	}
	if m.Currency != 0 {
		n += 1 + sovOrder(uint64(m.Currency))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *Shipping) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Carrier)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.TrackingNumber)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *Shipping_Address) Size() (n int) {
	var l int
	_ = l
	l = len(m.Line1)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Line2)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.PostalCode)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *OrderList) Size() (n int) {
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovOrder(uint64(m.Total))
	}
	return n
}

func (m *NewRequest) Size() (n int) {
	var l int
	_ = l
	if m.Currency != 0 {
		n += 1 + sovOrder(uint64(m.Currency))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovOrder(uint64(l))
		}
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOrder(uint64(len(k))) + 1 + len(v) + sovOrder(uint64(len(v)))
			n += mapEntrySize + 1 + sovOrder(uint64(mapEntrySize))
		}
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Shipping != nil {
		l = m.Shipping.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *PayRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Card != nil {
		l = m.Card.Size()
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.PaymentProviderId != 0 {
		n += 1 + sovOrder(uint64(m.PaymentProviderId))
	}
	return n
}

func (m *ReturnRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovOrder(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovOrder(uint64(m.Limit))
	}
	if m.Sort != 0 {
		n += 1 + sovOrder(uint64(m.Sort))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= (paymentpb.Currency(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &OrderItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthOrder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthOrder
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Metadata[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Metadata[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (OrderStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shipping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shipping == nil {
				m.Shipping = &Shipping{}
			}
			if err := m.Shipping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 998:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 999:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: orderItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: orderItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OrderItem_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= (paymentpb.Currency(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shipping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: shipping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: shipping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Shipping_Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Carrier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Carrier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackingNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrackingNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shipping_Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Line1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Line2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostalCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: orderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: orderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &Order{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: newRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: newRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			m.Currency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Currency |= (paymentpb.Currency(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &OrderItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthOrder
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthOrder
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Metadata[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Metadata[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shipping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shipping == nil {
				m.Shipping = &Shipping{}
			}
			if err := m.Shipping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: getRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: getRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: payRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: payRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Card == nil {
				m.Card = &paymentpb.Card{}
			}
			if err := m.Card.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentProviderId", wireType)
			}
			m.PaymentProviderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentProviderId |= (paymentpb.PaymentProviderId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: returnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: returnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: listRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: listRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (ListRequest_Sort(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("order/orderpb/order.proto", fileDescriptorOrder) }

var fileDescriptorOrder = []byte{
	// 1237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5d, 0x8f, 0xdb, 0x44,
	0x17, 0x5e, 0xc7, 0xce, 0xd7, 0xc9, 0xdb, 0x6d, 0x3a, 0xed, 0x5b, 0xbc, 0x51, 0x49, 0xd2, 0xa9,
	0xba, 0x6c, 0xa5, 0xdd, 0x6c, 0x37, 0xad, 0xd0, 0x6a, 0x4b, 0x91, 0x9a, 0xf2, 0xa1, 0xa2, 0x52,
	0x56, 0x2e, 0x05, 0x09, 0x21, 0xa1, 0x89, 0x3d, 0xcd, 0x8e, 0xea, 0xd8, 0xee, 0x78, 0xbc, 0x25,
	0xff, 0x04, 0xae, 0xb9, 0xe1, 0x2f, 0x70, 0xc1, 0x35, 0x5c, 0xf2, 0x0b, 0x22, 0x54, 0x24, 0xb8,
	0x44, 0xca, 0x1d, 0x77, 0x68, 0x66, 0x6c, 0xc7, 0xc9, 0x26, 0x05, 0x95, 0x9b, 0xc4, 0x67, 0xce,
	0x73, 0x66, 0xce, 0x9c, 0xf3, 0xcc, 0x33, 0x03, 0x5b, 0x21, 0xf7, 0x28, 0xdf, 0x57, 0xbf, 0xd1,
	0x50, 0xff, 0xf7, 0x22, 0x1e, 0x8a, 0x10, 0x55, 0xd3, 0xc1, 0xd6, 0xde, 0x88, 0x89, 0x93, 0x64,
	0xd8, 0x73, 0xc3, 0xf1, 0xfe, 0x28, 0x1c, 0x85, 0xfb, 0xca, 0x3f, 0x4c, 0x9e, 0x2a, 0x4b, 0x19,
	0xea, 0x4b, 0xc7, 0xb5, 0x0e, 0x0b, 0x70, 0x8f, 0x8d, 0x42, 0x41, 0xb2, 0xbf, 0x88, 0x4c, 0xc6,
	0x34, 0x10, 0xd9, 0x7f, 0x34, 0xcc, 0xbe, 0x74, 0x24, 0xfe, 0xce, 0x82, 0xb2, 0x5a, 0x14, 0xb5,
	0xa1, 0xc4, 0x3c, 0xdb, 0xe8, 0x1a, 0x3b, 0xf5, 0xc1, 0xe6, 0x6c, 0xda, 0x81, 0x61, 0x1c, 0x06,
	0x47, 0xf8, 0x2b, 0xe6, 0x61, 0xa7, 0xc4, 0x3c, 0x74, 0x19, 0x2a, 0x64, 0x1c, 0x26, 0x81, 0xb0,
	0x4b, 0x5d, 0x63, 0xc7, 0x74, 0x52, 0x0b, 0xed, 0x43, 0xcd, 0x4d, 0x38, 0xa7, 0x81, 0x3b, 0xb1,
	0xcd, 0xae, 0xb1, 0xb3, 0xd9, 0xbf, 0xd8, 0xcb, 0x57, 0xeb, 0x65, 0x2e, 0x27, 0x07, 0xa1, 0x1d,
	0x28, 0x33, 0x41, 0xc7, 0xb1, 0x6d, 0x75, 0xcd, 0x9d, 0x46, 0x1f, 0xf5, 0xd2, 0x4d, 0xeb, 0xff,
	0x07, 0x82, 0x8e, 0x1d, 0x0d, 0x40, 0x87, 0x50, 0x1b, 0x53, 0x41, 0x3c, 0x22, 0x88, 0x5d, 0x56,
	0xe0, 0x2b, 0x8b, 0xe0, 0xde, 0xc7, 0xa9, 0xfb, 0xfd, 0x40, 0xf0, 0x89, 0x93, 0xa3, 0xd1, 0x25,
	0x28, 0xd3, 0x31, 0x61, 0xbe, 0x5d, 0x91, 0xfb, 0x71, 0xb4, 0x81, 0x5a, 0x50, 0x73, 0x4f, 0x08,
	0x1f, 0xd1, 0x07, 0x9e, 0x5d, 0x55, 0x8e, 0xdc, 0x46, 0x7b, 0x50, 0x79, 0x2c, 0x88, 0x48, 0x62,
	0xbb, 0xa6, 0x36, 0xf1, 0xff, 0xa5, 0x95, 0x62, 0xe5, 0x74, 0x52, 0x10, 0xda, 0x83, 0x5a, 0x7c,
	0xc2, 0xa2, 0x88, 0x05, 0x23, 0xbb, 0xde, 0x35, 0x76, 0x1a, 0xfd, 0x0b, 0x79, 0x40, 0xe6, 0x70,
	0x72, 0x08, 0xda, 0x82, 0xaa, 0xcb, 0x29, 0x11, 0xd4, 0xb3, 0x7f, 0xaf, 0xaa, 0xf2, 0x65, 0xb6,
	0x74, 0x25, 0x91, 0xa7, 0x5c, 0x7f, 0xa4, 0xae, 0xd4, 0x6e, 0xdd, 0x81, 0x73, 0x0b, 0x1b, 0x44,
	0x4d, 0x30, 0x9f, 0xd1, 0x89, 0x6e, 0x92, 0x23, 0x3f, 0xe5, 0x46, 0x4f, 0x89, 0x9f, 0x50, 0xd5,
	0x94, 0xba, 0xa3, 0x8d, 0xa3, 0xd2, 0xa1, 0x81, 0x3f, 0x82, 0x8a, 0xce, 0x19, 0x35, 0xa0, 0x7a,
	0x5f, 0x2f, 0xd6, 0xdc, 0x40, 0x35, 0xb0, 0x8e, 0x09, 0xf3, 0x9a, 0x06, 0xfa, 0x1f, 0xd4, 0xee,
	0x93, 0xc0, 0xa5, 0x3e, 0xf5, 0x9a, 0x25, 0x74, 0x0e, 0xea, 0x1f, 0x24, 0xfe, 0x53, 0xe6, 0x4b,
	0xd3, 0x94, 0x4e, 0x87, 0x8a, 0x84, 0x07, 0xd4, 0x6b, 0x5a, 0xf8, 0x7b, 0x13, 0xea, 0x79, 0x77,
	0xd0, 0x31, 0x58, 0x62, 0x12, 0x51, 0x95, 0xc6, 0x66, 0xff, 0x8d, 0xb3, 0xfd, 0xeb, 0x7d, 0x3a,
	0x89, 0xe8, 0xe0, 0xda, 0x6c, 0xda, 0xe9, 0x9c, 0x12, 0x9f, 0xc9, 0xcd, 0x1c, 0x61, 0x4e, 0x9f,
	0x27, 0x8c, 0x53, 0x6f, 0x77, 0x24, 0xe8, 0xdd, 0x83, 0x5d, 0x5f, 0xd0, 0xbb, 0xb7, 0xb1, 0xa3,
	0x66, 0x42, 0x47, 0x50, 0x7b, 0x9e, 0x90, 0x40, 0x30, 0x31, 0xd1, 0xec, 0x1a, 0xb4, 0x67, 0xd3,
	0x4e, 0x6b, 0x1e, 0x1c, 0x8e, 0x25, 0x23, 0x22, 0x31, 0x51, 0xd1, 0x37, 0xb1, 0x93, 0xe3, 0x0b,
	0xbc, 0x34, 0x17, 0x78, 0xf9, 0x79, 0x81, 0x97, 0xd6, 0x5a, 0x5e, 0x0e, 0xb6, 0x67, 0xd3, 0x0e,
	0x5e, 0xb7, 0x90, 0x4e, 0xf3, 0xa0, 0x7f, 0x88, 0x0b, 0xfc, 0x7d, 0x1b, 0x2a, 0x11, 0xe1, 0x34,
	0x10, 0x76, 0x59, 0x1d, 0x96, 0xb5, 0xa9, 0x26, 0x09, 0xf3, 0x6e, 0x63, 0x27, 0x45, 0xa3, 0x2e,
	0x34, 0x3c, 0x1a, 0xbb, 0x9c, 0x45, 0x82, 0x85, 0x41, 0xca, 0xcc, 0xe2, 0x10, 0x1e, 0x80, 0x25,
	0x2b, 0x27, 0x8b, 0xcf, 0x69, 0x4c, 0xf9, 0xa9, 0xea, 0x58, 0x15, 0xcc, 0xf8, 0x59, 0xa2, 0x1b,
	0xe6, 0xb1, 0xd8, 0x95, 0xbb, 0x6b, 0x96, 0xe4, 0xb0, 0x20, 0x5f, 0xeb, 0x56, 0x65, 0x3c, 0x6b,
	0x5a, 0xf8, 0xa7, 0xd2, 0xdc, 0x44, 0x08, 0xac, 0x80, 0x8c, 0x69, 0x4a, 0x18, 0xf5, 0x2d, 0x19,
	0x13, 0x9d, 0x84, 0x41, 0xce, 0x18, 0x65, 0xa0, 0x5b, 0x50, 0x25, 0x9e, 0xc7, 0x69, 0x1c, 0xab,
	0x32, 0x36, 0xfa, 0x5b, 0x67, 0xe8, 0xdc, 0xbb, 0xa7, 0x01, 0x4e, 0x86, 0x44, 0x36, 0x54, 0x5d,
	0xc2, 0x39, 0xa3, 0x5c, 0x55, 0xb8, 0xee, 0x64, 0x26, 0xda, 0x86, 0x4d, 0xc1, 0x89, 0xfb, 0x8c,
	0x05, 0xa3, 0x47, 0xc9, 0x78, 0x48, 0xb9, 0xae, 0x95, 0xb3, 0x34, 0xda, 0xfa, 0xd6, 0x80, 0x6a,
	0x3a, 0xad, 0x4c, 0xcc, 0x67, 0x01, 0x3d, 0x48, 0xb3, 0xd5, 0x86, 0xdc, 0x82, 0x9b, 0xd1, 0xa2,
	0xee, 0xa8, 0x6f, 0xb5, 0xae, 0xac, 0x02, 0xd7, 0x8a, 0x23, 0xd7, 0xd5, 0x66, 0x36, 0x47, 0x3f,
	0xcd, 0x47, 0x1b, 0xa8, 0x0d, 0x10, 0x85, 0xb1, 0x20, 0xfe, 0xfd, 0xd0, 0xa3, 0x69, 0x26, 0x85,
	0x11, 0x19, 0x25, 0x8f, 0x0a, 0xcd, 0xd4, 0x42, 0x19, 0xf8, 0x41, 0xca, 0xf9, 0x87, 0x2c, 0x16,
	0x68, 0x1b, 0x2a, 0xca, 0x88, 0x6d, 0x43, 0x09, 0xd1, 0xe6, 0x22, 0xeb, 0x9d, 0xd4, 0x2b, 0xa7,
	0x12, 0xa1, 0x20, 0xbe, 0xca, 0xb7, 0xec, 0x68, 0x03, 0xff, 0x60, 0x02, 0x04, 0xf4, 0x85, 0x43,
	0x9f, 0x27, 0x34, 0x16, 0xe8, 0xb3, 0x02, 0x35, 0x8d, 0xf5, 0xd4, 0xbc, 0x3e, 0x9b, 0x76, 0xae,
	0xbe, 0xf2, 0x00, 0x2d, 0x31, 0xf3, 0x71, 0xa6, 0xac, 0xa5, 0x75, 0xca, 0x3a, 0xb8, 0x31, 0x9b,
	0x76, 0xae, 0x6b, 0x65, 0x57, 0x50, 0xdc, 0x9d, 0x2f, 0xe0, 0xb1, 0x53, 0xba, 0x9b, 0xad, 0x82,
	0x33, 0x11, 0xbe, 0x5b, 0x10, 0x61, 0x53, 0xcd, 0x7b, 0x35, 0x9f, 0x77, 0xbe, 0xa7, 0xb5, 0x4a,
	0x7c, 0x3b, 0x53, 0x62, 0xeb, 0xd5, 0x87, 0x45, 0x81, 0x70, 0xa6, 0xd4, 0x0f, 0x0b, 0xf2, 0x5a,
	0x5e, 0x23, 0xaf, 0x83, 0x37, 0x67, 0xd3, 0xce, 0xd6, 0xaa, 0xb9, 0xe4, 0x46, 0xf0, 0x5c, 0x7d,
	0xff, 0x9b, 0x8e, 0xde, 0x01, 0x18, 0x51, 0x91, 0xb5, 0x6e, 0xaf, 0x70, 0x4b, 0x2e, 0xad, 0xaf,
	0x8e, 0x7b, 0xa1, 0x7e, 0x25, 0xe6, 0xe1, 0x3f, 0x0d, 0x80, 0x88, 0x4c, 0x5e, 0x2f, 0x1a, 0xdd,
	0x03, 0xcb, 0x25, 0xdc, 0x53, 0x39, 0x35, 0xfa, 0xe7, 0x8b, 0x1c, 0x21, 0xdc, 0x1b, 0x5c, 0x99,
	0x4d, 0x3b, 0xf6, 0xda, 0xf6, 0xa9, 0x50, 0x14, 0xc2, 0x85, 0x34, 0xea, 0x98, 0x87, 0xa7, 0x4c,
	0xd2, 0xc0, 0x4b, 0xaf, 0xe9, 0x2b, 0x85, 0xf9, 0xce, 0x60, 0xfe, 0x85, 0x7a, 0x1f, 0x60, 0xe7,
	0xec, 0xdc, 0xf8, 0x5d, 0x38, 0xc7, 0xd5, 0xc5, 0xf1, 0x9a, 0x15, 0xfb, 0xb1, 0x04, 0x0d, 0x9f,
	0xc5, 0x79, 0xc1, 0xef, 0x80, 0x15, 0x91, 0x91, 0x96, 0x30, 0x73, 0xf0, 0xd6, 0x6c, 0xda, 0xb9,
	0xb6, 0xaa, 0xe5, 0x0b, 0xf9, 0xdd, 0xc4, 0x8e, 0x0a, 0x42, 0xef, 0x48, 0x39, 0x18, 0xb3, 0xf4,
	0xc9, 0xb2, 0x5e, 0xeb, 0x0b, 0xd1, 0x32, 0x58, 0x07, 0xa1, 0x2f, 0xc1, 0x8a, 0x43, 0x2e, 0xd2,
	0x72, 0xcd, 0x05, 0xb1, 0x90, 0x5e, 0xef, 0x71, 0xc8, 0xc5, 0x60, 0x6f, 0x36, 0xed, 0xdc, 0xf8,
	0xe7, 0xac, 0xf2, 0x3b, 0x4f, 0xce, 0x8a, 0x9f, 0x80, 0x25, 0x83, 0xe5, 0xed, 0xfc, 0x88, 0x88,
	0x84, 0x13, 0xbf, 0xb9, 0x81, 0xce, 0x43, 0x23, 0xbd, 0xaa, 0xdf, 0xa3, 0xb1, 0xdb, 0x34, 0xd0,
	0x26, 0x40, 0x3a, 0x70, 0x2f, 0x76, 0x9b, 0x25, 0x09, 0x78, 0xa2, 0x5f, 0x07, 0x0a, 0x60, 0x4a,
	0x40, 0x3a, 0x20, 0x01, 0x56, 0xff, 0x2f, 0x03, 0xca, 0x9f, 0xa8, 0x07, 0xdd, 0x2e, 0x98, 0x8f,
	0xe8, 0x0b, 0x74, 0x71, 0xc5, 0x69, 0x6d, 0x2d, 0xc9, 0x17, 0xde, 0x90, 0xe8, 0x0f, 0xa9, 0x28,
	0xa0, 0xe7, 0xa4, 0x5f, 0x8d, 0x3e, 0x26, 0x93, 0x02, 0x7a, 0x4e, 0xf2, 0x15, 0xe8, 0x3e, 0x54,
	0xf4, 0x63, 0x02, 0x5d, 0xce, 0x7d, 0x0b, 0x24, 0x59, 0x19, 0x63, 0x29, 0xe1, 0xbd, 0xb4, 0xaa,
	0xec, 0xad, 0x25, 0x69, 0x93, 0x48, 0xbc, 0x31, 0x38, 0xfc, 0xf9, 0x65, 0xdb, 0xf8, 0xe5, 0x65,
	0xdb, 0xf8, 0xf5, 0x65, 0xdb, 0xf8, 0xe6, 0xb7, 0xf6, 0xc6, 0x17, 0xdb, 0x6b, 0x1f, 0xc6, 0x0b,
	0x8f, 0xf0, 0x61, 0x45, 0xbd, 0x86, 0x6f, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x51, 0x4e, 0x08,
	0xab, 0x9c, 0x0b, 0x00, 0x00,
}
