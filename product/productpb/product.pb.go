// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: product/productpb/product.proto

/*
Package productpb is a generated protocol buffer package.

It is generated from these files:
	product/productpb/product.proto

It has these top-level messages:
	Empty
	Product
	ProductList
	NewRequest
	GetRequest
	DeleteRequest
	UpdateRequest
	ListRequest
*/
package productpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import skupb "github.com/digota/digota/sku/skupb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{0} }

type Product struct {
	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Active      bool              `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Attributes  []string          `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	Description string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Images      []string          `protobuf:"bytes,6,rep,name=images" json:"images,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Shippable   bool              `protobuf:"varint,8,opt,name=shippable,proto3" json:"shippable,omitempty"`
	Url         string            `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Skus        []*skupb.Sku      `protobuf:"bytes,10,rep,name=skus" json:"skus,omitempty"`
	Created     int64             `protobuf:"varint,998,opt,name=created,proto3" json:"created,omitempty"`
	Updated     int64             `protobuf:"varint,999,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{1} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Product) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Product) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Product) GetShippable() bool {
	if m != nil {
		return m.Shippable
	}
	return false
}

func (m *Product) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Product) GetSkus() []*skupb.Sku {
	if m != nil {
		return m.Skus
	}
	return nil
}

func (m *Product) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Product) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type ProductList struct {
	Products []*Product `protobuf:"bytes,1,rep,name=products" json:"products,omitempty"`
	Total    int32      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ProductList) Reset()                    { *m = ProductList{} }
func (m *ProductList) String() string            { return proto.CompactTextString(m) }
func (*ProductList) ProtoMessage()               {}
func (*ProductList) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{2} }

func (m *ProductList) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *ProductList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type NewRequest struct {
	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required,gte=0"`
	Active      bool              `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty" validate:"required"`
	Attributes  []string          `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" validate:"dive,required"`
	Description string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" validate:"gt=0,lt=2056"`
	Images      []string          `protobuf:"bytes,5,rep,name=images" json:"images,omitempty" validate:"dive,url"`
	Metadata    map[string]string `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" validate:"" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Shippable   bool              `protobuf:"varint,7,opt,name=shippable,proto3" json:"shippable,omitempty" validate:""`
	Url         string            `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty" validate:"omitempty,url"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{3} }

func (m *NewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *NewRequest) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *NewRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NewRequest) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *NewRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NewRequest) GetShippable() bool {
	if m != nil {
		return m.Shippable
	}
	return false
}

func (m *NewRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{4} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{5} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateRequest struct {
	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" validate:"required,gte=4"`
	Active      bool              `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty" validate:"omitempty,required"`
	Attributes  []string          `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" validate:"dive,required"`
	Description string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty" validate:"gt=0,lt=2056"`
	Images      []string          `protobuf:"bytes,6,rep,name=images" json:"images,omitempty" validate:"dive,url"`
	Metadata    map[string]string `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" validate:"" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Shippable   bool              `protobuf:"varint,8,opt,name=shippable,proto3" json:"shippable,omitempty" validate:""`
	Url         string            `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty" validate:"omitempty,url"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{6} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *UpdateRequest) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateRequest) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *UpdateRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpdateRequest) GetShippable() bool {
	if m != nil {
		return m.Shippable
	}
	return false
}

func (m *UpdateRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ListRequest struct {
	Page  int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorProduct, []int{7} }

func (m *ListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "productpb.empty")
	proto.RegisterType((*Product)(nil), "productpb.product")
	proto.RegisterType((*ProductList)(nil), "productpb.productList")
	proto.RegisterType((*NewRequest)(nil), "productpb.newRequest")
	proto.RegisterType((*GetRequest)(nil), "productpb.getRequest")
	proto.RegisterType((*DeleteRequest)(nil), "productpb.deleteRequest")
	proto.RegisterType((*UpdateRequest)(nil), "productpb.updateRequest")
	proto.RegisterType((*ListRequest)(nil), "productpb.listRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Product service

type ProductClient interface {
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Product, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Product, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Product, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ProductList, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type productClient struct {
	cc *grpc.ClientConn
}

func NewProductClient(cc *grpc.ClientConn) ProductClient {
	return &productClient{cc}
}

func (c *productClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/productpb.Product/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/productpb.Product/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/productpb.Product/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ProductList, error) {
	out := new(ProductList)
	err := grpc.Invoke(ctx, "/productpb.Product/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/productpb.Product/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Product service

type ProductServer interface {
	New(context.Context, *NewRequest) (*Product, error)
	Get(context.Context, *GetRequest) (*Product, error)
	Update(context.Context, *UpdateRequest) (*Product, error)
	List(context.Context, *ListRequest) (*ProductList, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
}

func RegisterProductServer(s *grpc.Server, srv ProductServer) {
	s.RegisterService(&_Product_serviceDesc, srv)
}

func _Product_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productpb.Product/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productpb.Product/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productpb.Product/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productpb.Product/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productpb.Product/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Product_serviceDesc = grpc.ServiceDesc{
	ServiceName: "productpb.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _Product_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Product_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Product_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Product_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Product_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/productpb/product.proto",
}

func init() { proto.RegisterFile("product/productpb/product.proto", fileDescriptorProduct) }

var fileDescriptorProduct = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0xd7, 0x26, 0xfd, 0x3a, 0xd5, 0x60, 0x32, 0xb0, 0x65, 0x65, 0x5b, 0x8a, 0x91, 0x50,
	0x85, 0xba, 0x76, 0x94, 0x31, 0xc6, 0xb6, 0x72, 0x51, 0x81, 0xb8, 0x01, 0x34, 0x65, 0xe2, 0x86,
	0x1b, 0x94, 0x34, 0x26, 0xb3, 0x96, 0x36, 0x59, 0xe2, 0x74, 0xda, 0x3b, 0xf0, 0x0a, 0xbc, 0x03,
	0xef, 0xc1, 0x3b, 0xf4, 0x12, 0xee, 0xfb, 0x04, 0xc8, 0x4e, 0x9a, 0x8f, 0x75, 0xd5, 0xa6, 0x4e,
	0xe2, 0xa2, 0x8d, 0x8f, 0x7d, 0xfe, 0xc7, 0x27, 0xc7, 0x3f, 0x3b, 0x06, 0xd5, 0xf5, 0x1c, 0x33,
	0xe8, 0xb3, 0x76, 0xf4, 0x74, 0x8d, 0x69, 0xab, 0xe5, 0x7a, 0x0e, 0x73, 0x50, 0x25, 0x1e, 0xa8,
	0x6d, 0x5b, 0x94, 0x9d, 0x06, 0x46, 0xab, 0xef, 0x0c, 0xda, 0x96, 0x63, 0x39, 0x6d, 0xe1, 0x61,
	0x04, 0xdf, 0x85, 0x25, 0x0c, 0xd1, 0x0a, 0x95, 0xb5, 0x66, 0xca, 0xdd, 0xa4, 0x96, 0xc3, 0xf4,
	0xe9, 0xc3, 0x3f, 0x0b, 0xf8, 0xcf, 0x35, 0xf8, 0x7f, 0xe8, 0x8d, 0x4b, 0x50, 0x20, 0x03, 0x97,
	0x5d, 0xe2, 0x5f, 0x12, 0x94, 0xa2, 0x39, 0xd1, 0x16, 0xe4, 0xa9, 0xa9, 0xe4, 0xea, 0xb9, 0x46,
	0xa5, 0x77, 0x6f, 0x32, 0x56, 0xc1, 0xf0, 0x9d, 0xe1, 0x01, 0xfe, 0x46, 0x4d, 0xac, 0xe5, 0xa9,
	0x89, 0x10, 0xc8, 0x43, 0x7d, 0x40, 0x94, 0x3c, 0xf7, 0xd0, 0x44, 0x1b, 0xad, 0x42, 0x51, 0xef,
	0x33, 0x3a, 0x22, 0x8a, 0x54, 0xcf, 0x35, 0xca, 0x5a, 0x64, 0xa1, 0x2d, 0x00, 0x9d, 0x31, 0x8f,
	0x1a, 0x01, 0x23, 0xbe, 0x22, 0xd7, 0xa5, 0x46, 0x45, 0x4b, 0xf5, 0xa0, 0x3a, 0x54, 0x4d, 0xe2,
	0xf7, 0x3d, 0xea, 0x32, 0xea, 0x0c, 0x95, 0x82, 0x08, 0x99, 0xee, 0xe2, 0x91, 0xe9, 0x40, 0xb7,
	0x88, 0xaf, 0x14, 0x85, 0x3a, 0xb2, 0xd0, 0x11, 0x94, 0x07, 0x84, 0xe9, 0xa6, 0xce, 0x74, 0xa5,
	0x54, 0x97, 0x1a, 0xd5, 0x4e, 0xbd, 0x15, 0x57, 0x6d, 0xda, 0x6a, 0x7d, 0x8a, 0x5c, 0xde, 0x0f,
	0x99, 0x77, 0xa9, 0xc5, 0x0a, 0xb4, 0x01, 0x15, 0xff, 0x94, 0xba, 0xae, 0x6e, 0xd8, 0x44, 0x29,
	0x8b, 0x94, 0x93, 0x0e, 0xb4, 0x02, 0x52, 0xe0, 0xd9, 0x4a, 0x45, 0x64, 0xc3, 0x9b, 0x68, 0x0b,
	0x64, 0xff, 0x2c, 0xf0, 0x15, 0x10, 0x33, 0x41, 0x4b, 0x14, 0x92, 0xff, 0x6b, 0xa2, 0x1f, 0xad,
	0x43, 0xa9, 0xef, 0x11, 0x9d, 0x11, 0x53, 0xf9, 0x53, 0xaa, 0xe7, 0x1a, 0x92, 0x36, 0xb5, 0xf9,
	0x50, 0xe0, 0x9a, 0x62, 0xe8, 0x6f, 0x34, 0x14, 0xd9, 0xb5, 0x43, 0x58, 0xce, 0x24, 0xc8, 0x27,
	0x3e, 0x23, 0x97, 0x61, 0xed, 0x35, 0xde, 0x44, 0x0f, 0xa1, 0x30, 0xd2, 0xed, 0x60, 0x5a, 0xed,
	0xd0, 0x38, 0xc8, 0xef, 0xe7, 0xf0, 0x09, 0x54, 0xa3, 0xb7, 0xfc, 0x48, 0x7d, 0x86, 0x5a, 0x50,
	0x8e, 0x4c, 0x5f, 0xc9, 0x89, 0x2c, 0xd1, 0x6c, 0x3d, 0xb4, 0xd8, 0x87, 0x07, 0x66, 0x0e, 0xd3,
	0x6d, 0x11, 0xb8, 0xa0, 0x85, 0x06, 0xfe, 0x21, 0x03, 0x0c, 0xc9, 0x85, 0x46, 0xce, 0x03, 0xe2,
	0x33, 0xf4, 0x22, 0x5a, 0xea, 0x10, 0x86, 0xcd, 0xc9, 0x58, 0x5d, 0x1f, 0xe9, 0x36, 0xe5, 0xd9,
	0x1f, 0x60, 0x8f, 0x9c, 0x07, 0xd4, 0x23, 0x66, 0xd3, 0x62, 0xa4, 0xbb, 0x83, 0x23, 0x12, 0xda,
	0x31, 0x09, 0x3c, 0x70, 0xb9, 0xb7, 0x36, 0x19, 0xab, 0x0f, 0x66, 0x45, 0x38, 0x46, 0xe4, 0x28,
	0x83, 0x88, 0xc4, 0x17, 0xb9, 0xb7, 0x31, 0x19, 0xab, 0x4a, 0x22, 0x32, 0xe9, 0x88, 0x34, 0x13,
	0x65, 0x1a, 0xa0, 0x6e, 0x16, 0x20, 0x59, 0x24, 0xfa, 0x78, 0x32, 0x56, 0xd7, 0x12, 0xb9, 0xc5,
	0xba, 0x3b, 0x4d, 0x9b, 0x75, 0x3b, 0x3b, 0xaf, 0xf6, 0x70, 0x96, 0xae, 0x76, 0x4c, 0x57, 0x41,
	0x4c, 0x7c, 0x25, 0x5b, 0x31, 0x71, 0xe0, 0xd9, 0x38, 0xc6, 0xee, 0x38, 0x85, 0x5d, 0x51, 0x94,
	0xf9, 0x69, 0xaa, 0xcc, 0x49, 0xe9, 0xb2, 0xe4, 0xf5, 0xee, 0x4f, 0xc6, 0x6a, 0x35, 0x89, 0x8b,
	0x53, 0x28, 0x6e, 0xa7, 0x51, 0x2c, 0x89, 0x9a, 0xcd, 0x78, 0xa7, 0xd8, 0x6c, 0x85, 0x6c, 0x96,
	0xc5, 0x8b, 0x5e, 0xa9, 0x93, 0x33, 0xa0, 0x4c, 0xec, 0xe7, 0x30, 0x67, 0xee, 0x78, 0x37, 0xc6,
	0x0e, 0x01, 0x2c, 0xc2, 0xa6, 0x34, 0x6c, 0xa7, 0x0e, 0x86, 0x79, 0x2c, 0x04, 0x01, 0x35, 0x77,
	0xc5, 0x39, 0x81, 0xdf, 0xc2, 0xb2, 0x49, 0x6c, 0xc2, 0xc8, 0x82, 0xfa, 0xdf, 0x32, 0x2c, 0x87,
	0x3b, 0x65, 0xb1, 0x00, 0x31, 0xbd, 0xf9, 0x1b, 0xe9, 0xdd, 0x9d, 0xd2, 0xfb, 0x26, 0x7b, 0x8e,
	0xf5, 0x9e, 0x4c, 0xc6, 0xea, 0xe6, 0x75, 0x05, 0xbe, 0x89, 0x63, 0xf9, 0x6e, 0x1c, 0x17, 0x16,
	0xe6, 0xb8, 0x78, 0x3b, 0x8e, 0x4f, 0x66, 0x8e, 0xcf, 0x67, 0x29, 0x8e, 0x33, 0x65, 0x5f, 0x10,
	0xe5, 0xf2, 0x6d, 0x51, 0xae, 0xfc, 0x17, 0x94, 0x5f, 0x43, 0xd5, 0xa6, 0x7e, 0xcc, 0x32, 0x02,
	0xd9, 0xd5, 0xad, 0xf0, 0x64, 0x93, 0x34, 0xd1, 0xe6, 0x62, 0x9b, 0x0e, 0x28, 0x13, 0x62, 0x49,
	0x0b, 0x8d, 0xce, 0xcf, 0x3c, 0x94, 0x8e, 0xa3, 0x4f, 0x63, 0x07, 0xa4, 0xcf, 0xe4, 0x02, 0x3d,
	0xba, 0x76, 0xcb, 0xd7, 0xae, 0x39, 0x70, 0xf1, 0x12, 0xd7, 0x7c, 0x20, 0x2c, 0xa3, 0x49, 0xf6,
	0xd4, 0x1c, 0xcd, 0x3e, 0x14, 0xbf, 0x88, 0x25, 0x40, 0xca, 0xbc, 0x55, 0x99, 0xab, 0x94, 0xc5,
	0xe7, 0x60, 0x35, 0x35, 0x9a, 0x7a, 0xef, 0xda, 0xea, 0xac, 0x8a, 0xfb, 0xe3, 0x25, 0xb4, 0x07,
	0xc5, 0x77, 0x62, 0xbb, 0x66, 0xe6, 0xcc, 0xec, 0xe0, 0xda, 0x4a, 0x6a, 0x24, 0xbc, 0x38, 0x2c,
	0xf5, 0x9a, 0x5f, 0x9f, 0xcf, 0xbd, 0x73, 0xcc, 0xdc, 0x73, 0x8c, 0xa2, 0xb8, 0x78, 0xbc, 0xfc,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xba, 0xc4, 0xe0, 0x03, 0x09, 0x00, 0x00,
}
