// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sku/skupb/sku.proto

/*
Package skupb is a generated protocol buffer package.

It is generated from these files:
	sku/skupb/sku.proto

It has these top-level messages:
	Empty
	Sku
	Inventory
	PackageDimensions
	NewRequest
	GetRequest
	DeleteRequest
	UpdateRequest
	SkuList
	ListRequest
*/
package skupb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import paymentpb "github.com/digota/digota/payment/paymentpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Inventory_Type int32

const (
	Inventory_Infinite Inventory_Type = 0
	Inventory_Finite   Inventory_Type = 1
)

var Inventory_Type_name = map[int32]string{
	0: "Infinite",
	1: "Finite",
}
var Inventory_Type_value = map[string]int32{
	"Infinite": 0,
	"Finite":   1,
}

func (x Inventory_Type) String() string {
	return proto.EnumName(Inventory_Type_name, int32(x))
}
func (Inventory_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorSku, []int{2, 0} }

type ListRequest_Sort int32

const (
	ListRequest_Natural     ListRequest_Sort = 0
	ListRequest_CreatedDesc ListRequest_Sort = 1
	ListRequest_CreatedAsc  ListRequest_Sort = 2
	ListRequest_UpdatedDesc ListRequest_Sort = 3
	ListRequest_UpdatedAsc  ListRequest_Sort = 4
)

var ListRequest_Sort_name = map[int32]string{
	0: "Natural",
	1: "CreatedDesc",
	2: "CreatedAsc",
	3: "UpdatedDesc",
	4: "UpdatedAsc",
}
var ListRequest_Sort_value = map[string]int32{
	"Natural":     0,
	"CreatedDesc": 1,
	"CreatedAsc":  2,
	"UpdatedDesc": 3,
	"UpdatedAsc":  4,
}

func (x ListRequest_Sort) String() string {
	return proto.EnumName(ListRequest_Sort_name, int32(x))
}
func (ListRequest_Sort) EnumDescriptor() ([]byte, []int) { return fileDescriptorSku, []int{9, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{0} }

type Sku struct {
	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Price             uint64             `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Currency          paymentpb.Currency `protobuf:"varint,4,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty"`
	Active            bool               `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Parent            string             `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	Metadata          map[string]string  `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Attributes        map[string]string  `protobuf:"bytes,8,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,10,opt,name=packageDimensions" json:"packageDimensions,omitempty"`
	Inventory         *Inventory         `protobuf:"bytes,11,opt,name=inventory" json:"inventory,omitempty"`
	Created           int64              `protobuf:"varint,998,opt,name=created,proto3" json:"created,omitempty"`
	Updated           int64              `protobuf:"varint,999,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (m *Sku) Reset()                    { *m = Sku{} }
func (m *Sku) String() string            { return proto.CompactTextString(m) }
func (*Sku) ProtoMessage()               {}
func (*Sku) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{1} }

func (m *Sku) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Sku) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sku) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Sku) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *Sku) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Sku) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Sku) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Sku) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Sku) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Sku) GetPackageDimensions() *PackageDimensions {
	if m != nil {
		return m.PackageDimensions
	}
	return nil
}

func (m *Sku) GetInventory() *Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *Sku) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Sku) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type Inventory struct {
	Quantity int64          `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty" validate:"omitempty,gte=0"`
	Type     Inventory_Type `protobuf:"varint,2,opt,name=type,proto3,enum=skupb.Inventory_Type" json:"type,omitempty" validate:"omitempty,required,gte=0,lte=1"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{2} }

func (m *Inventory) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Inventory) GetType() Inventory_Type {
	if m != nil {
		return m.Type
	}
	return Inventory_Infinite
}

type PackageDimensions struct {
	Height float64 `protobuf:"fixed64,1,opt,name=height,proto3" json:"height,omitempty" validate:"required,gt=0"`
	Length float64 `protobuf:"fixed64,2,opt,name=length,proto3" json:"length,omitempty" validate:"required,gt=0"`
	Weight float64 `protobuf:"fixed64,3,opt,name=weight,proto3" json:"weight,omitempty" validate:"required,gt=0"`
	Width  float64 `protobuf:"fixed64,4,opt,name=width,proto3" json:"width,omitempty" validate:"required,gt=0"`
}

func (m *PackageDimensions) Reset()                    { *m = PackageDimensions{} }
func (m *PackageDimensions) String() string            { return proto.CompactTextString(m) }
func (*PackageDimensions) ProtoMessage()               {}
func (*PackageDimensions) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{3} }

func (m *PackageDimensions) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PackageDimensions) GetLength() float64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *PackageDimensions) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *PackageDimensions) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return 0
}

type NewRequest struct {
	Name              string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required,gt=0"`
	Currency          paymentpb.Currency `protobuf:"varint,2,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty" validate:"omitempty,required,gte=0,lte=128"`
	Active            bool               `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty" validate:"required"`
	Price             uint64             `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty" validate:"required,gte=0"`
	Parent            string             `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty" validate:"required,uuid4"`
	Metadata          map[string]string  `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty" validate:"url"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,8,opt,name=packageDimensions" json:"packageDimensions,omitempty" validate:"omitempty,dive"`
	Inventory         *Inventory         `protobuf:"bytes,9,opt,name=inventory" json:"inventory,omitempty" validate:"required,dive"`
	Attributes        map[string]string  `protobuf:"bytes,10,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{4} }

func (m *NewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewRequest) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *NewRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *NewRequest) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *NewRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *NewRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NewRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *NewRequest) GetPackageDimensions() *PackageDimensions {
	if m != nil {
		return m.PackageDimensions
	}
	return nil
}

func (m *NewRequest) GetInventory() *Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *NewRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{5} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{6} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateRequest struct {
	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" validate:"required,uuid4"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" validate:"omitempty,gt=0"`
	Currency          paymentpb.Currency `protobuf:"varint,3,opt,name=currency,proto3,enum=paymentpb.Currency" json:"currency,omitempty" validate:"omitempty,required,gte=0,lte=128"`
	Active            bool               `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Price             uint64             `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty" validate:"omitempty,gte=0"`
	Parent            string             `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty" validate:"omitempty,uuid4"`
	Metadata          map[string]string  `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image             string             `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty" validate:"omitempty,url"`
	PackageDimensions *PackageDimensions `protobuf:"bytes,9,opt,name=packageDimensions" json:"packageDimensions,omitempty" validate:"omitempty,dive"`
	Inventory         *Inventory         `protobuf:"bytes,10,opt,name=inventory" json:"inventory,omitempty" validate:"omitempty,dive"`
	Attributes        map[string]string  `protobuf:"bytes,11,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{7} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRequest) GetCurrency() paymentpb.Currency {
	if m != nil {
		return m.Currency
	}
	return paymentpb.Currency_CUR_RESERVED
}

func (m *UpdateRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *UpdateRequest) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *UpdateRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *UpdateRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpdateRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *UpdateRequest) GetPackageDimensions() *PackageDimensions {
	if m != nil {
		return m.PackageDimensions
	}
	return nil
}

func (m *UpdateRequest) GetInventory() *Inventory {
	if m != nil {
		return m.Inventory
	}
	return nil
}

func (m *UpdateRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type SkuList struct {
	Orders []*Sku `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
	Total  int32  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *SkuList) Reset()                    { *m = SkuList{} }
func (m *SkuList) String() string            { return proto.CompactTextString(m) }
func (*SkuList) ProtoMessage()               {}
func (*SkuList) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{8} }

func (m *SkuList) GetOrders() []*Sku {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *SkuList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ListRequest struct {
	Page  int64            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" validate:"omitempty,required,gte=0"`
	Limit int64            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" validate:"omitempty,required,gt=0"`
	Sort  ListRequest_Sort `protobuf:"varint,3,opt,name=sort,proto3,enum=skupb.ListRequest_Sort" json:"sort,omitempty" validate:"omitempty,required,gte=0,lte=4"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorSku, []int{9} }

func (m *ListRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetSort() ListRequest_Sort {
	if m != nil {
		return m.Sort
	}
	return ListRequest_Natural
}

func init() {
	proto.RegisterType((*Empty)(nil), "skupb.empty")
	proto.RegisterType((*Sku)(nil), "skupb.sku")
	proto.RegisterType((*Inventory)(nil), "skupb.inventory")
	proto.RegisterType((*PackageDimensions)(nil), "skupb.packageDimensions")
	proto.RegisterType((*NewRequest)(nil), "skupb.newRequest")
	proto.RegisterType((*GetRequest)(nil), "skupb.getRequest")
	proto.RegisterType((*DeleteRequest)(nil), "skupb.deleteRequest")
	proto.RegisterType((*UpdateRequest)(nil), "skupb.updateRequest")
	proto.RegisterType((*SkuList)(nil), "skupb.skuList")
	proto.RegisterType((*ListRequest)(nil), "skupb.listRequest")
	proto.RegisterEnum("skupb.Inventory_Type", Inventory_Type_name, Inventory_Type_value)
	proto.RegisterEnum("skupb.ListRequest_Sort", ListRequest_Sort_name, ListRequest_Sort_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sku service

type SkuClient interface {
	New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Sku, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Sku, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Sku, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*SkuList, error)
}

type skuClient struct {
	cc *grpc.ClientConn
}

func NewSkuClient(cc *grpc.ClientConn) SkuClient {
	return &skuClient{cc}
}

func (c *skuClient) New(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := grpc.Invoke(ctx, "/skupb.Sku/New", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := grpc.Invoke(ctx, "/skupb.Sku/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Sku, error) {
	out := new(Sku)
	err := grpc.Invoke(ctx, "/skupb.Sku/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/skupb.Sku/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skuClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*SkuList, error) {
	out := new(SkuList)
	err := grpc.Invoke(ctx, "/skupb.Sku/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sku service

type SkuServer interface {
	New(context.Context, *NewRequest) (*Sku, error)
	Get(context.Context, *GetRequest) (*Sku, error)
	Update(context.Context, *UpdateRequest) (*Sku, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
	List(context.Context, *ListRequest) (*SkuList, error)
}

func RegisterSkuServer(s *grpc.Server, srv SkuServer) {
	s.RegisterService(&_Sku_serviceDesc, srv)
}

func _Sku_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.Sku/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServer).New(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sku_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.Sku/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sku_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.Sku/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sku_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.Sku/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sku_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkuServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skupb.Sku/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkuServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sku_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skupb.Sku",
	HandlerType: (*SkuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _Sku_New_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Sku_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Sku_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Sku_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Sku_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sku/skupb/sku.proto",
}

func init() { proto.RegisterFile("sku/skupb/sku.proto", fileDescriptorSku) }

var fileDescriptorSku = []byte{
	// 1162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x8e, 0x2c, 0x59, 0x76, 0x8e, 0x1b, 0xd7, 0x65, 0xba, 0x55, 0x35, 0xb6, 0xca, 0xe3, 0x8a,
	0xce, 0xc3, 0x12, 0xbb, 0x75, 0xb3, 0x21, 0x48, 0x96, 0x02, 0x71, 0xb3, 0x0e, 0x03, 0xda, 0x5e,
	0xa8, 0x2b, 0x30, 0xf4, 0x66, 0x93, 0x2d, 0xd6, 0x21, 0x6c, 0x4b, 0x8a, 0x44, 0x39, 0xf0, 0x9b,
	0xec, 0x5d, 0x76, 0x39, 0xec, 0x35, 0x0c, 0x6c, 0x17, 0x1b, 0x76, 0xeb, 0x27, 0x18, 0x48, 0x4a,
	0xb2, 0xfc, 0x17, 0xb7, 0xc5, 0x86, 0xf5, 0xc6, 0x16, 0xc9, 0xef, 0x3b, 0xe4, 0x39, 0xe4, 0xf7,
	0x89, 0x82, 0xdd, 0xb0, 0x1f, 0x35, 0xc3, 0x7e, 0xe4, 0x77, 0xf8, 0x6f, 0xc3, 0x0f, 0x3c, 0xe6,
	0xa1, 0xbc, 0xe8, 0xa8, 0xee, 0xf7, 0x28, 0x3b, 0x8f, 0x3a, 0x8d, 0xae, 0x37, 0x6c, 0xf6, 0xbc,
	0x9e, 0xd7, 0x14, 0xa3, 0x9d, 0xe8, 0xb5, 0x68, 0x89, 0x86, 0x78, 0x92, 0xac, 0xea, 0x61, 0x06,
	0xee, 0xd0, 0x9e, 0xc7, 0xec, 0xe4, 0xcf, 0xb7, 0xc7, 0x43, 0xe2, 0xb2, 0xe4, 0xdf, 0xef, 0x24,
	0x4f, 0x92, 0x89, 0x0b, 0x90, 0x27, 0x43, 0x9f, 0x8d, 0xf1, 0x1f, 0x1a, 0xa8, 0x61, 0x3f, 0x42,
	0x77, 0x20, 0x47, 0x1d, 0x43, 0xa9, 0x29, 0xf5, 0xed, 0x76, 0x79, 0x3a, 0x31, 0xa1, 0x13, 0x7a,
	0xee, 0x11, 0xfe, 0x91, 0x3a, 0xd8, 0xca, 0x51, 0x07, 0x21, 0xd0, 0x5c, 0x7b, 0x48, 0x8c, 0x1c,
	0x47, 0x58, 0xe2, 0x19, 0xdd, 0x84, 0xbc, 0x1f, 0xd0, 0x2e, 0x31, 0xd4, 0x9a, 0x52, 0xd7, 0x2c,
	0xd9, 0x40, 0x4d, 0x28, 0x76, 0xa3, 0x20, 0x20, 0x6e, 0x77, 0x6c, 0x68, 0x35, 0xa5, 0x5e, 0x6e,
	0xed, 0x36, 0xd2, 0x65, 0x34, 0x92, 0x21, 0x2b, 0x05, 0xa1, 0x0f, 0x41, 0xb7, 0xbb, 0x8c, 0x8e,
	0x88, 0x91, 0xaf, 0x29, 0xf5, 0xa2, 0x15, 0xb7, 0x78, 0xbf, 0x6f, 0x07, 0xc4, 0x65, 0x86, 0x2e,
	0x26, 0x8d, 0x5b, 0xe8, 0x00, 0x8a, 0x43, 0xc2, 0x6c, 0xc7, 0x66, 0xb6, 0x51, 0xa8, 0xa9, 0xf5,
	0x52, 0xcb, 0x68, 0x88, 0xf2, 0xf1, 0xdf, 0xc6, 0xb3, 0x78, 0xe8, 0x1b, 0x97, 0x05, 0x63, 0x2b,
	0x45, 0xa2, 0x23, 0x00, 0x9b, 0xb1, 0x80, 0x76, 0x22, 0x46, 0x42, 0xa3, 0x28, 0x78, 0xd5, 0x0c,
	0xef, 0x34, 0x1d, 0x94, 0xcc, 0x0c, 0x9a, 0x27, 0x4a, 0x87, 0x76, 0x8f, 0x18, 0xdb, 0x62, 0x21,
	0xb2, 0x81, 0x9e, 0xc0, 0x0d, 0xdf, 0xee, 0xf6, 0xed, 0x1e, 0x39, 0xa3, 0x43, 0xe2, 0x86, 0xd4,
	0x73, 0x43, 0x03, 0x6a, 0x4a, 0x66, 0x41, 0x4b, 0xe3, 0xd6, 0x32, 0x05, 0x35, 0x60, 0x9b, 0xba,
	0x23, 0xe2, 0x32, 0x2f, 0x18, 0x1b, 0x25, 0xc1, 0xaf, 0xc4, 0xfc, 0xb4, 0xdf, 0x9a, 0x41, 0xd0,
	0x6d, 0x28, 0x74, 0x03, 0x62, 0x33, 0xe2, 0x18, 0x7f, 0x16, 0x6a, 0x4a, 0x5d, 0xb5, 0x92, 0x36,
	0x1f, 0x8a, 0x7c, 0x47, 0x0c, 0xfd, 0x15, 0x0f, 0xc5, 0xed, 0xea, 0x31, 0xec, 0xcc, 0x95, 0x06,
	0x55, 0x40, 0xed, 0x93, 0xb1, 0xdc, 0x72, 0x8b, 0x3f, 0xf2, 0x34, 0x47, 0xf6, 0x20, 0x4a, 0x36,
	0x59, 0x36, 0x8e, 0x72, 0x87, 0x4a, 0xf5, 0x04, 0xae, 0x2f, 0xd4, 0xe7, 0x6d, 0xe8, 0xf8, 0x57,
	0x25, 0x93, 0x22, 0x3a, 0x82, 0xe2, 0x45, 0x64, 0xbb, 0x8c, 0x32, 0x49, 0x57, 0xdb, 0x77, 0xa6,
	0x13, 0xb3, 0x3a, 0xb2, 0x07, 0x94, 0x2f, 0xf5, 0x08, 0x7b, 0x43, 0xca, 0xc4, 0xe9, 0xdc, 0xeb,
	0x31, 0x72, 0x72, 0x1f, 0x5b, 0x29, 0x1e, 0xfd, 0x00, 0x1a, 0x1b, 0xfb, 0x72, 0x8a, 0x72, 0xeb,
	0x83, 0xc5, 0x32, 0x35, 0xbe, 0x1f, 0xfb, 0xa4, 0xbd, 0x3f, 0x9d, 0x98, 0x9f, 0xaf, 0x0a, 0x17,
	0x90, 0x8b, 0x88, 0x06, 0xc4, 0x91, 0x71, 0xf7, 0x06, 0x8c, 0x9c, 0x3c, 0xc0, 0x96, 0x88, 0x88,
	0x6b, 0xa0, 0x71, 0x32, 0xba, 0x06, 0xc5, 0xef, 0xdc, 0xd7, 0xd4, 0xa5, 0x8c, 0x54, 0xb6, 0x10,
	0x80, 0xfe, 0x44, 0x3e, 0x2b, 0xf8, 0x6f, 0x65, 0xc5, 0x86, 0xa3, 0x03, 0xd0, 0xcf, 0x09, 0xed,
	0x9d, 0x33, 0x91, 0x8b, 0xd2, 0xfe, 0x68, 0x3a, 0x31, 0x8d, 0xd9, 0xe4, 0x99, 0x29, 0x79, 0x26,
	0x31, 0x96, 0xb3, 0x06, 0xc4, 0xed, 0xb1, 0x73, 0x91, 0xc9, 0x46, 0x96, 0xc4, 0x72, 0xd6, 0xa5,
	0x9c, 0x4b, 0x7d, 0x13, 0x96, 0xc4, 0xa2, 0x16, 0xe4, 0x2f, 0xa9, 0xc3, 0xce, 0x85, 0x1a, 0x37,
	0x91, 0x24, 0x14, 0xff, 0xac, 0x03, 0xb8, 0xe4, 0xd2, 0x22, 0x17, 0x11, 0x09, 0x19, 0xba, 0x1f,
	0xab, 0x5f, 0xfa, 0xc3, 0xd5, 0x11, 0xa4, 0x37, 0xfc, 0x94, 0x71, 0x81, 0xdc, 0x5a, 0x17, 0x68,
	0x37, 0xa7, 0x13, 0xf3, 0x8b, 0x37, 0xdd, 0xaa, 0xd6, 0x21, 0xce, 0xd8, 0x46, 0x33, 0xb5, 0x0d,
	0x5e, 0x8c, 0x62, 0xfb, 0xd6, 0x74, 0x62, 0xee, 0x2e, 0xaf, 0x0a, 0xa7, 0x7e, 0xf2, 0x30, 0xb1,
	0x2b, 0x5e, 0x07, 0xad, 0xfd, 0xf1, 0x74, 0x62, 0xde, 0x5e, 0x99, 0x85, 0x38, 0x73, 0xb1, 0x9b,
	0x7d, 0x99, 0x9a, 0x50, 0x5e, 0xe4, 0xbe, 0x8e, 0x15, 0x45, 0xd4, 0x39, 0xc0, 0xa9, 0x47, 0x1d,
	0x67, 0x3c, 0x4a, 0x17, 0x5e, 0x63, 0xc6, 0x67, 0x75, 0x56, 0xd5, 0xb5, 0x56, 0x55, 0x4f, 0xec,
	0xa6, 0x20, 0xa6, 0x44, 0xd3, 0x89, 0x59, 0x9e, 0x4d, 0x19, 0x05, 0x03, 0x9c, 0x58, 0x10, 0x59,
	0x65, 0x41, 0xc5, 0xab, 0x2d, 0x68, 0x31, 0x85, 0x59, 0xcd, 0x1d, 0x3a, 0x22, 0x78, 0x95, 0x43,
	0x3d, 0xcd, 0x3a, 0xd4, 0xf6, 0x6a, 0x87, 0x5a, 0x7b, 0x2a, 0x64, 0xd4, 0x8c, 0xfe, 0x4f, 0xe7,
	0x9c, 0x18, 0x44, 0x75, 0x3e, 0x59, 0xae, 0xce, 0x15, 0x86, 0xfc, 0xbf, 0x9a, 0xd9, 0x31, 0x40,
	0x8f, 0xb0, 0x44, 0x19, 0xfb, 0x99, 0xf7, 0xe6, 0x86, 0xb3, 0x91, 0xa3, 0x0e, 0x7e, 0x04, 0x3b,
	0x0e, 0x19, 0x10, 0x46, 0xde, 0x91, 0xff, 0x9b, 0x0e, 0x3b, 0xd2, 0xd1, 0xdf, 0x2d, 0x00, 0x7a,
	0x90, 0x7d, 0x8f, 0xaf, 0x3f, 0x0a, 0xeb, 0xa4, 0xac, 0xfe, 0x27, 0x52, 0x9e, 0xdd, 0x00, 0xb4,
	0xb9, 0x1b, 0xc0, 0x41, 0xa2, 0xd8, 0xbc, 0x50, 0xec, 0xa6, 0xd7, 0x44, 0x2c, 0xd9, 0xaf, 0xe6,
	0xef, 0x0d, 0xeb, 0x69, 0x0b, 0x9a, 0x7d, 0xb4, 0x74, 0xaf, 0xc0, 0xf1, 0xa9, 0x9c, 0xab, 0xf8,
	0x5a, 0xd9, 0xb6, 0x12, 0xd9, 0x16, 0x57, 0xb9, 0x64, 0x66, 0xda, 0x4d, 0x02, 0xde, 0xfe, 0xd7,
	0x05, 0xfc, 0x2c, 0x2b, 0x60, 0x58, 0x23, 0xe0, 0x0d, 0x61, 0x33, 0x0a, 0x3e, 0x9b, 0x53, 0x70,
	0x49, 0xd4, 0xea, 0xee, 0xca, 0x5a, 0xbd, 0xaf, 0x22, 0x7e, 0x0c, 0x85, 0xb0, 0x1f, 0x3d, 0xa5,
	0x21, 0x43, 0x18, 0x74, 0x2f, 0x70, 0x48, 0x10, 0x1a, 0x8a, 0x48, 0x04, 0x66, 0x97, 0x42, 0x2b,
	0x1e, 0xe1, 0x81, 0x98, 0xc7, 0xec, 0x81, 0x08, 0x94, 0xb7, 0x64, 0x03, 0xff, 0x92, 0x83, 0xd2,
	0x80, 0x86, 0xa9, 0x17, 0x1c, 0x83, 0xe6, 0xf3, 0xfd, 0x97, 0x97, 0x9a, 0xcf, 0xa6, 0x13, 0xf3,
	0xd3, 0xcd, 0x7a, 0xc0, 0x96, 0x20, 0xa1, 0xaf, 0x21, 0x3f, 0xa0, 0x43, 0xca, 0xc4, 0x14, 0x6a,
	0xfb, 0xde, 0x74, 0x62, 0xe2, 0x0d, 0x6c, 0x71, 0xe6, 0x05, 0x09, 0xbd, 0x02, 0x2d, 0xf4, 0x02,
	0x16, 0xeb, 0xf3, 0x56, 0x9c, 0x42, 0x66, 0x71, 0x8d, 0x17, 0x5e, 0xc0, 0xde, 0xea, 0x66, 0x74,
	0x80, 0x2d, 0x11, 0x13, 0xbf, 0x04, 0x8d, 0x93, 0x51, 0x09, 0x0a, 0xcf, 0x6d, 0x16, 0x05, 0xf6,
	0xa0, 0xb2, 0x85, 0xae, 0x43, 0xe9, 0xb1, 0xbc, 0x74, 0x9e, 0x91, 0xb0, 0x5b, 0x51, 0x50, 0x19,
	0x20, 0xee, 0x38, 0x0d, 0xbb, 0x95, 0x1c, 0x07, 0xbc, 0x94, 0x57, 0x4f, 0x01, 0x50, 0x39, 0x20,
	0xee, 0xe0, 0x00, 0xad, 0xf5, 0xbb, 0x02, 0xea, 0x8b, 0x7e, 0x84, 0xee, 0x81, 0xfa, 0x9c, 0x5c,
	0xa2, 0x1b, 0x4b, 0x6f, 0x80, 0x6a, 0x66, 0x27, 0xf0, 0x16, 0xc7, 0x7d, 0x4b, 0x58, 0x8a, 0x9b,
	0x79, 0xf0, 0x02, 0x6e, 0x0f, 0x74, 0x39, 0x0f, 0xba, 0xb9, 0xea, 0x48, 0x2e, 0xa0, 0x1b, 0xa0,
	0x9f, 0x09, 0x43, 0x4e, 0xd1, 0x73, 0xfe, 0x5c, 0xbd, 0x16, 0xf7, 0xca, 0xaf, 0x25, 0x1e, 0x5d,
	0x13, 0xa7, 0x06, 0x2d, 0x97, 0xb8, 0x5a, 0x9e, 0x45, 0xe6, 0x18, 0xbc, 0xd5, 0xbe, 0xfb, 0x0a,
	0xaf, 0xfd, 0x44, 0x4b, 0x3f, 0x03, 0x3b, 0xba, 0xf8, 0x26, 0x7b, 0xf8, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xab, 0x6a, 0xde, 0xc4, 0x1a, 0x0e, 0x00, 0x00,
}
